name: Build and Push Docker Image

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Enable Nix extra platforms
      run: |
        echo "extra-platforms = aarch64-linux" | sudo tee -a /etc/nix/nix.conf
        sudo systemctl restart nix-daemon

    - name: Update image name in default.nix
      run: |
        sed -i 's/YOUR_USERNAME/${{ github.repository_owner }}/g' default.nix

    - name: Build AMD64 image
      run: |
        nix-build --arg system '"x86_64-linux"'
        docker load < result
        docker tag rdkafka-node:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64

    - name: Build ARM64 image
      run: |
        nix-build --arg system '"aarch64-linux"'
        docker load < result
        docker tag rdkafka-node:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push images
      if: github.event_name != 'pull_request'
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64

  create-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create and push manifest
      run: |
        docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64

        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
